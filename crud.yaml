openapi: 3.1.0
info:
  title: CRUD API
  version: 0.1.0
  contact:
    name: API Support
    url: http://localhost:3000/support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: |
    # Items REST API
    The Items API allows you to manage items in the system. You 
    can retrieve a list of items, create new items, update existing items, 
    and delete items. The API also provides endpoints to retrieve the 
    count of items available in the system.
    
    ## Getting Started in < 5 minutes with the Items API
    To request a list of items, you can use the following cURL command:
    
    ```bash
    curl -X GET "http://localhost:3000/api/items" -H "accept: application/json"
    ```    
    To create a new item, you can use the following cURL command:
    
    ```bash
    curl -X POST "http://localhost:3000/api/items" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"name\": \"New Item\", \"description\": \"Description of the new item\", \"price\": 15.0}"
    ```

    ## Authentication
    The API does not require authentication to access the endpoints.

    ## Versioning
    The API is currently at version 0.1.0.

servers:
  - url: http://localhost:3000
    description: Debug Server

tags:
  - name: Authentication
    description: Operations related to Authentication
  - name: Items
    description: Operations related to items
  - name: Asynchronous Actions
    description: Operations related to tasks

paths:
  /api/createSession:
    post:
      tags:
        - Authentication
      operationId: createSession
      description: Create a session bearer token for subsequent API calls passed via the Authorization header.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '200':
          description: JWT token to be used with Authentication Bearer token header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
  /api/items:
    get:
      tags:
        - Items
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      summary: Retrieve a list of items
      description: Fetches a list of all items available in the system. This endpoint does not require any parameters.
      operationId: getItems
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                maxLength: 1024
                items:
                  $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        default:
          description: An unexpected error occurred        
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    post:
      tags:
        - Items
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      summary: Create a new item
      description: Creates a new item in the system. The request body must include the item details.
      operationId: createItem
      requestBody:
        description: The details of the new item to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example:
                summary: Example request
                value:
                  name: New Item
                  description: Description of the new item
                  price: 15.0
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        default:
          description: An unexpected error occurred        
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
  /api/items/{id}:
    get:
      tags:
        - Items
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      summary: Retrieve a single item by ID
      description: Fetches the details of a single item by its ID. The ID must be provided as a path parameter.
      operationId: getItemById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the item to retrieve. This ID can be obtained from the list of items.
          schema:
            type: integer
      responses:
        '200':
          description: A single item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
              example:
                id: 1
                name: Sample Item
                description: This is a sample item.
                price: 9.99
                createdAt: '2023-01-01T00:00:00Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
              example:
                code: 400
                message: Invalid request parameters
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
              example:
                code: 404
                message: Item not found
        default:
          description: An unexpected error occurred        
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    put:
      tags:
        - Items
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      summary: Update an existing item by ID
      description: Updates the details of an existing item by its ID. The ID must be provided as a path parameter, and the request body must include the updated item details.
      operationId: updateItemById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the item to update. This ID can be obtained from the list of items.
          schema:
            type: integer
      requestBody:
        description: The updated details of the item.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example1:
                summary: Example of an updated item
                value:
                  name: Updated Item Name
                  description: Updated item description.
                  price: 20.5
      responses:
        '200':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
    delete:
      tags:
        - Items
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      summary: Delete an item by ID
      description: Deletes an existing item by its ID. The ID must be provided as a path parameter.
      operationId: deleteItemById
      parameters:
        - name: id
          in: path
          required: true
          description: The unique identifier of the item to delete. This ID can be obtained from the list of items.
          schema:
            type: integer
      responses:
        '204':
          description: Item deleted
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        default:
          description: An unexpected error occurred        
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
  /api/items/count:
    get:
      tags:
        - Items
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      summary: Retrieve the count of items
      description: Returns the total number of items available in the system.
      operationId: getItemCount
      responses:
        '200':
          description: The count of items
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemCount'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        default:
          description: An unexpected error occurred        
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

  /api/items/{id}/actions:
    post:
      tags:
        - Asynchronous Actions
      security:
        - BearerAuth: []
      description: Initiate an asynchronous action on a Item resource
      operationId: createItemAction
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the item for the action.
          schema:
            type: string
      requestBody:
        required: true
        description: Action details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '202':
          description: Action accepted, task started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid request parameters or action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Foo resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

  /api/items/{id}/actions-oneOf:
    post:
      tags:
        - Asynchronous Actions
      security:
        - BearerAuth: []  # Required Bearer token for this endpoint
      description: Initiate an asynchronous action on an item using oneOf
      operationId: createItemOneOfAction
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the item for the action.
          schema:
            type: string
      requestBody:
        required: true
        description: Wait action details.
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/WaitRequest'
                - $ref: '#/components/schemas/HoldRequest'
                - $ref: '#/components/schemas/PauseRequest'
      responses:
        '200':
          description: Task status retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '400':
          description: Invalid action ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '404':
          description: Action not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # Optional: You can specify the format (JWT in this case)
  schemas:
    ItemCount:
      type: object
      description: The total count of all items
      additionalProperties: false
      properties:
        count:
          type: integer
          description: The total number of items.
      example:
        count: 42
    Item:
      type: object
      description: Represents an item in the system.
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The unique identifier of the item.
          readOnly: true
        name:
          type: string
          description: The name of the item.
        description:
          type: string
          description: A detailed description of the item.
        price:
          type: number
          format: float
          description: The price of the item.
        createdAt:
          type: string
          format: date-time
          readOnly: true
          description: The date and time when the item was created.
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$'
          maxLength: 20
      example:
        id: 1
        name: Sample Item
        description: This is a sample item.
        price: 9.99
        createdAt: '2023-01-01T00:00:00Z'
    APIError:
      additionalProperties: false
      type: object
      description: Represents an error response.
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: The error code.
        message:
          type: string
          maxLength: 1024
          description: A detailed error message.
      example:
        code: 400
        message: Invalid request parameters
    TaskRequest:
      type: object
      required: [action]
      properties:
        action:
          type: string
          enum: [resize, reboot, cycle, stretch]
          description: The action to perform.
          example: "resize"
        parameters:
          type: object
          description: Optional parameters specific to the action.
          additionalProperties: true    
    TaskResponse:
      type: object
      properties:
        task_id:
          type: string
          example: "10"
        status:
          type: string
          enum: [WAITING, COMPLETED]
          example: "COMPLETED"
        result:
          type: object
          description: |
            Optional additional result details, such as new resource size after resize.
          additionalProperties: true
    WaitRequest:
      type: object
      required: [action,length]
      properties:
        action:
          type: string
          enum: [WAIT]
          description: The action to perform.
          example: "WAIT"
        length:
          type: integer
          description: Length of the pause in milliseconds.
          example: 5
    HoldRequest:
      type: object
      required: [action,duration]
      properties:
        action:
          type: string
          enum: [HOLD]
          description: The action to perform.
          example: "HOLD"
        duration:
          type: integer
          description: Duration of the hold in milliseconds.
          example: 10
    PauseRequest:
      type: object
      required: [action,seconds]
      properties:
        action:
          type: string
          enum: [PAUSE]
          description: Performs the pause action.
          example: "PAUSE"
        seconds:
          type: integer
          description: Number of milliseconds to pause.
          example: 5
    SessionRequest:
      description: User for which to create a new session
      type: object
      required: [username]
      properties:
        username: 
          type: string
          example: "strefethen"
    SessionResponse:
      description: Authentication successful, JWT token returned
      type: object
      properties:
        token:
          type: string
          description: JWT Toke for use with Authentication Bearer token header
          example: "eyEhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InN0ZXZlIiwiaWF0IjoxNzQzNTMyMDkzLCJleHAiOjE3NDM1MzM4OTN9.7-WtngihYl5WKEzonJILRy_Sc0aFTrEbj3dRdTTAWRY"
        